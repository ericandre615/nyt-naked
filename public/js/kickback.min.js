var kickback=function(e){"use strict";function t(e){var t=[];for(var a in e)e.hasOwnProperty(a)&&t.push(encodeURIComponent(a)+"="+encodeURIComponent(e[a]));return t.join("&")}return e={},e.request=function(e){if("string"==typeof e){var a=e;e={},e.url=a,a=null}if(e.url=e.url?e.url:"/",e.data=e.data?e.data:null,e.method=e.method?e.method:"GET",e.headers=e.headers?e.headers:!1,e.cors=e.cors?e.cors:!1,e.async=e.async?e.async:!0,e.serialize=e.serialize?e.serialize:!1,e.auto=e.auto?e.auto:!1,Object.defineProperty(e,"tmp",{configurable:!0,writable:!0}),e.auto===!0)if("undefined"!=typeof window.FormData)if(e.data instanceof HTMLElement)e.data=new FormData(e.data);else{if("object"!=typeof e.data||e.data instanceof Array!=!1)throw new Error("Submit data as object or HTMLElement");e.tmp=e.data,e.data=new FormData,Object.keys(e.tmp).forEach(function(t){e.data.append(t,e.tmp[t])}),delete e.tmp}else e.data instanceof HTMLElement&&(e.tmp={},[].forEach.call(e.data,function(t){e.tmp[t.name]=t.value}),e.data=e.tmp,delete e.tmp),e.serialize=!0;return e.serialize===!0&&(e.data=t(e.data)),console.log(e.data instanceof FormData?"formDATA":"notFormData"),new Promise(function(t,a){var r=new XMLHttpRequest;r.open(e.method,e.url,e.async),r.onload=function(){200==r.status?t(r.response):a(Error("Error: ",r.statusTxt))},r.onerror=function(){a(Error("Network Error"))},e.headers!==!1&&(e.headers.type=e.headers.type||"Content-Type",e.headers.value=e.headers.value||"text/plain;charset=UTF-8",r.setRequestHeader(e.headers.type,e.headers.value)),e.headers===!1&&"post"===e.method.toLowerCase()&&e.serialize===!0&&r.setRequestHeader("Content-Type","application/x-www-form-urlencoded"),r.send("get"===e.method.toLowerCase()?null:e.data)})},e}(kickback);"undefined"!=typeof module&&module.exports&&(module.exports=kickback);
//# sourceMappingURL=data:application/json;base64,